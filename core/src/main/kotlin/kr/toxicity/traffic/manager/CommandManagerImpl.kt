package kr.toxicity.traffic.manager

import dev.jorel.commandapi.CommandAPI
import dev.jorel.commandapi.CommandAPIBukkitConfig
import dev.jorel.commandapi.CommandAPICommand
import dev.jorel.commandapi.executors.CommandExecutor
import kr.toxicity.traffic.api.ReloadState.Failure
import kr.toxicity.traffic.api.ReloadState.OnReload
import kr.toxicity.traffic.api.ReloadState.Success
import kr.toxicity.traffic.api.manager.CommandManager
import kr.toxicity.traffic.util.PLUGIN
import kr.toxicity.traffic.util.handleException
import net.kyori.adventure.text.Component
import net.kyori.adventure.text.format.NamedTextColor

object CommandManagerImpl : CommandManager, TrafficManagerImpl {

    override val name = "command"

    override fun start() {
        CommandAPI.onLoad(CommandAPIBukkitConfig(PLUGIN).silentLogs(true))
        CommandAPICommand("traffic")
            .withSubcommands(
                CommandAPICommand("generate")
                    .withAliases("gen")
                    .withPermission("traffic.generate")
                    .executes(CommandExecutor { sender, _ ->
                        runCatching {
                            val path = PlayerManagerImpl.generateProfileResult().path
                            sender.sendMessage(Component.text("Generated by:").color(NamedTextColor.GREEN))
                            sender.sendMessage(Component.text(path))
                        }.getOrElse {
                            sender.sendMessage(Component.text("Unable to generate profile message."))
                            it.handleException("Unable to generate profile message.")
                        }
                    }),
                CommandAPICommand("reload")
                    .withAliases("re", "rl")
                    .withPermission("traffic.reload")
                    .executes(CommandExecutor { sender, _ ->
                        when (val result = PLUGIN.reload()) {
                            is OnReload -> sender.sendMessage(Component.text("Plugin is still on reload!").color(NamedTextColor.RED))
                            is Success -> sender.sendMessage(Component.text("Reload success (${result.time} ms)").color(NamedTextColor.GREEN))
                            is Failure -> sender.sendMessage(Component.text("Failed to reload!").color(NamedTextColor.RED))
                        }
                    }),
            )
            .register(PLUGIN)
    }

    override fun reload() {

    }
}